public class BSTInorder{
    //The order of "inorder" is: left child -> parent -> right child
    //Method 1 : Iterative
    public List<Integer> inorderTraversal1(TreeNode root){
        ArrayList<Integer> result = new ArrayList<>();
        Stack<TreeNode> stack = new Stack<>();

        TreeNode p = root;
        while(p != null){
            stack.push(p);
            p= p.left;
        }
        while(!stack.isEmpty()){
            TreeNode t = stack.pop();
            result.add(t.val);

            t = t.right;
            while(t != null){
                stack.push(t);
                t = t.left;
            }
        }
        return result;
    }

    // Method 2: Recursive

    List<Integer> result = new ArrayList<Integer>();
    public List<Integer> inorderTraversal (TreeNode root){
        if(root != null){
            helper(root);
        }
        return result;
    }
    public void helper(TreeNode p){
        if(p.left != null)
            helper(p.left);
        result.add(p.val);
        if(p.right !=null)
            helper(p.right);
    }

    // Method 3 : Simple
    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> result = new ArrayList<Integer>();
        if(root==null)
            return result;
        Stack<TreeNode> stack = new Stack<TreeNode>();
        stack.push(root);

        while(!stack.isEmpty()){
            TreeNode top = stack.peek();
            if(top.left!=null){
                stack.push(top.left);
                top.left=null;
            }else{
                result.add(top.val);
                stack.pop();
                if(top.right!=null){
                    stack.push(top.right);
                }
            }
        }

        return result;
    }
}