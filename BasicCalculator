
/*
Input: "(1+(4+5+2)-3)+(6+8)"
Output: 23
open ( and closing parentheses ), the plus + or minus sign -, non-negative integers and empty spaces
 */

class Solution{
    public static int calculate(String s) {
        int len = s.length(), sign = 1, result = 0;
        Stack<Integer> stack = new Stack<Integer>();
        for (int i = 0; i < len; i++) {
            if (Character.isDigit(s.charAt(i))) {
                int sum = s.charAt(i) - '0';
                while (i + 1 < len && Character.isDigit(s.charAt(i + 1))) {
                    sum = sum * 10 + s.charAt(i + 1) - '0';
                    i++;
                }
                result += sum * sign;
            } else if (s.charAt(i) == '+')
                sign = 1;
            else if (s.charAt(i) == '-')
                sign = -1;
            else if (s.charAt(i) == '(') {
                stack.push(result);
                stack.push(sign);
                result = 0;
                sign = 1;
            } else if (s.charAt(i) == ')') {
                result = result * stack.pop() + stack.pop();
            }

        }
        return result;
    }
}

/*
contains only non-negative integers, +, -, *, / operators and empty spaces
 */

class Solution{
    public class Solution {
        public int calculate(String s) {
            int len;
            if(s==null || (len = s.length())==0) return 0;
            Stack<Integer> stack = new Stack<Integer>();
            int num = 0;
            char sign = '+';
            for(int i=0;i<len;i++){
                if(Character.isDigit(s.charAt(i))){
                    num = num*10+s.charAt(i)-'0';
                }
                if((!Character.isDigit(s.charAt(i)) &&' '!=s.charAt(i)) || i==len-1){
                    if(sign=='-'){
                        stack.push(-num);
                    }
                    if(sign=='+'){
                        stack.push(num);
                    }
                    if(sign=='*'){
                        stack.push(stack.pop()*num);
                    }
                    if(sign=='/'){
                        stack.push(stack.pop()/num);
                    }
                    sign = s.charAt(i);
                    num = 0;
                }
            }

            int res = 0;
            for(int i:stack){
                res += i;
            }
            return res;
        }
    }