/*
Given a reference of a node in a connected undirected graph, return a deep copy (clone) of the graph. Each node in the
graph contains a val (int) and a list (List[Node]) of its neighbors.
 */

class Solution {
    public Node cloneGraph(Node node) {
        Map<Node,Node> map = new HashMap<>();
        if(node==null) return null;
        helper(node,map);
        return map.get(node);
    }

    public void helper(Node node, Map<Node,Node> map){
        if(node==null||map.containsKey(node)) return ;
        Node newNode = new Node(node.val,new ArrayList<Node>());
        map.put(node,newNode);
        for(Node neighbor : node.neighbors){
            if(!map.containsKey(neighbor)){
                helper(neighbor,map);
            }
            map.get(node).neighbors.add(map.get(neighbor));
        }
    }
}