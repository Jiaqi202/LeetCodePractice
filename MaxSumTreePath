
//method 1: return int
class Solution {
    int maxValue;
    public int maxPathSum(TreeNode root) {
        maxValue = Integer.MIN_VALUE;
        maxPathDown(root);
        return maxValue;
    }
    public int maxPathDown(TreeNode node){
        if(node == null) return 0;
        int left = Math.max(0, maxPathDown(node.left));
        int right = Math.max(0, maxPathDown(node.right));
        maxValue = Math.max(maxValue, left+right+node.val);
        return Math.max(left, right) + node.val;
    }

    public static void main(String args[]) {
        BinaryTree tree = new BinaryTree();
        tree.root = new Node(10);
        tree.root.left = new Node(2);
        tree.root.right = new Node(10);
        tree.root.left.left = new Node(20);
        tree.root.left.right = new Node(1);
        tree.root.right.right = new Node(-25);
        tree.root.right.right.left = new Node(3);
        tree.root.right.right.right = new Node(4);
        System.out.println("maximum path sum is : " +
                tree.maxPathSum());
    }
}



// Return path

class ReturnUnit{
    List<Integer> list;
    int value;

    ReturnUnit() {
        this.list = new ArrayList<>();
        this.value = 0;
    }

    ReturnUnit(List<Integer> list, int value) {
        this.list = list;
        this.value = value;
    }
}

public class MaxPathSum {
    static int maxResult = Integer.MIN_VALUE;
    static List<Integer> result = new ArrayList<>();


    private static ReturnUnit helper(TreeNode root) {
        if (root == null) return new ReturnUnit();
        ReturnUnit left = helper(root.left);
        ReturnUnit right = helper(root.right);
        int leftValue = left.value > 0 ? left.value : 0;
        int rightValue = right.value > 0 ? right.value : 0;
        List<Integer> leftList = leftValue > 0 ? left.list : new ArrayList<>();
        List<Integer> rightList = rightValue > 0 ? right.list : new ArrayList<>();
        List<Integer> temp = new ArrayList<>();. check 1point3acres for more.
        if (leftValue + rightValue + root.val > maxResult) {
            maxResult = leftValue + rightValue + root.val;
            result.clear();
            result.addAll(leftList);-baidu 1point3acres
            result.add(root.val);
            result.addAll(rightList);

        }
        if (leftValue > rightValue) {
            temp.addAll(new ArrayList<>(leftList));
            temp.add(root.val);
        } else {
            temp.add(root.val);
            temp.addAll(new ArrayList<>(rightList));
        }
        return new ReturnUnit(temp, Math.max(leftValue, rightValue) + root.val);
    }
